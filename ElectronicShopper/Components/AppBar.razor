@inject ICartService CartService
@inject Navigation NavManager
@using ElectronicShopper.Library
@using Microsoft.AspNetCore.Identity
@using ElectronicShopper.DataAccess.Identity
@using System.Security.Claims
@implements IDisposable
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

<div id="appbar" class="d-flex px-3">
    <h2 class="me-auto my-auto p-2 align-self-center appbar-title" onclick="@(() => NavManager.NavigateTo("/"))">ElectronicsShopper</h2>
    <div class="p-2 align-self-center">
        @* <LoginDisplay/> *@
        <AuthorizeView>
            <Authorized>
                @UserManager.GetUserAsync(context.User).Result.FirstName
                <div class="profile-link" onclick="@(() => NavManager.NavigateTo("/logout", true))">Logout</div>
            </Authorized>
            <NotAuthorized>
                <div class="profile-link" @onclick="@(() => NavManager.NavigateTo("/login"))">Login</div>
            </NotAuthorized>
        </AuthorizeView>
    </div>

    <div class="appbar-separator"></div>
    <div class="p-2 cart" onclick="@OnCartClick">
        <img src="images/Basket.png" alt="basket">

        @if (CartService.Count > 0)
        {
            <div class="cart-count">
                @CartService.Count
            </div>
        }
    </div>
</div>

@code {

    protected override Task OnInitializedAsync()
    {
        CartService.OnChange += UpdateCartIcon;
        return Task.CompletedTask;
    }

    private void OnCartClick()
    {
        NavManager.NavigateTo("/cart");
    }

    public void Dispose()
    {
        CartService.OnChange -= UpdateCartIcon;
    }


    private void UpdateCartIcon()
    {
        StateHasChanged();
    }


    private async Task<string> GetUserName(ClaimsPrincipal user)
    {
        var u = await UserManager.GetUserAsync(user);
        return u.FirstName;
    }

}