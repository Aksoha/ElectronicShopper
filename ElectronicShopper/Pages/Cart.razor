@page "/cart"
@using ElectronicShopper.Library.Models
@using ElectronicShopper.DataAccess.Data
@inject ICartService CartService
@inject IProductData ProductData
@inject NavigationManager NavManager
@implements IDisposable
@attribute [Authorize]


<div class="container">
    <div class="row g-5">
        <div class="col-md-10 col-sm-12 cart-summary">
            <EditForm id="FormId" EditContext="_editContext" OnValidSubmit="Checkout" OnInvalidSubmit="InvalidSubmit">
                @foreach (var item in CartService)
                {
                    <ObjectGraphDataAnnotationsValidator/>

                    <div class="row cart-summary-item align-items-center p-2">
                        <div class="col-md-2 col-sm-12 text-center">
                            <img class="cart-summary-item-img" src="@GetProductImage(item)" alt="product image"/>
                        </div>
                        <div class="col-lg-6 col-md-10 col-sm-12 text-sm-center text-md-center cart-summary-item-name" onclick="@(() => GoToProduct(item))">
                            @item.ProductName
                        </div>
                        @* TODO: fix styling of row that occurs at small resolution *@
                        <div class="col-lg-auto col-sm-12 ms-auto text-sm-center text-md-center text-lg-center">
                            <span>@((item.Quantity * item.PricePerItem).ToString("c"))</span>
                            <InputNumber TValue="int" class="form-input cart-summary-item-count text-center" @bind-Value="item.Quantity"/>
                            <div class="d-inline" onclick="@(() => RemoveItemFromCart(item))">
                                <img class="cart-summary-item-remove" src="./images/Trash-can.png" alt="remove item"/>
                            </div>
                        </div>
                    </div>
                }
            </EditForm>

        </div>
        <div class="col-md-2 col-sm-12">
            <div class="row">
                <div class="cart-checkout">
                    <div class="d-inline">Total price</div>
                    <div class="d-inline">@CartService.TotalPrice.ToString("C")</div>
                    <div class="validation-message">@_errorMessage</div>
                    <div>
                        <button class="btn btn-primary cart-checkout-btn" form="FormId" type="submit">Checkout</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {

    private readonly List<(int ProductId, string Path)> _images = new();
    private EditContext _editContext = null!;
    private string _errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        CartService.CartCountChange += UpdatePage;
        _editContext = new EditContext(CartService);
        await FetchImages();
    }

    private void RemoveItemFromCart(OrderDetailModel item)
    {
        CartService.Remove(item);
    }

    private void Checkout()
    {
        _errorMessage = "";
        CartService.Checkout();
        NavManager.NavigateTo("/order-confirmation");
    }

    private void GoToProduct(OrderDetailModel item)
    {
        NavManager.NavigateTo($"/p/{item.ProductId}");
    }

    private string GetProductImage(OrderDetailModel item)
    {
        var output = _images.SingleOrDefault(x => x.ProductId == item.ProductId).Path;
        return output;
    }


    private async Task FetchImages()
    {
        _images.Clear();
        foreach (var item in CartService)
        {
            var images = await ProductData.GetProductImages(new ProductModel { Id = item.ProductId });
            var primaryImg = images.SingleOrDefault(x => x.IsPrimary)?.Path;

            _images.Add(new ValueTuple<int, string>((int)item.ProductId!, primaryImg ?? "./images/missing-image.png"));
        }
    }

    /// <summary>
    /// Re-renders component whenever cart item changes.
    /// </summary>
    /// <remarks>
    /// Calling this method is required due to problems with fetching data from CartService.
    /// Refreshed page did not display cart items despite them being in the cart.
    /// </remarks>
    private async void UpdatePage()
    {
        await FetchImages();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        CartService.CartCountChange -= UpdatePage;
    }

    private void InvalidSubmit()
    {
        _errorMessage = "Item count can't contain non positive value";
    }

}