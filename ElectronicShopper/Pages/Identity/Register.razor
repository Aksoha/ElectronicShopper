@page "/register"
@using Microsoft.AspNetCore.Identity
@using ElectronicShopper.DataAccess.Identity
@using ElectronicShopper.Library
@using ElectronicShopper.Library.Models
@using AuthorizationMiddleware = ElectronicShopper.Middleware.AuthorizationMiddleware
@inject Navigation NavManager
@* @inject IUserEmailStore<IdentityUser> EmailStore *@
@inject IUserStore<ApplicationUser> UserStore
@inject UserManager<ApplicationUser> UserManager

<EditForm Model="@_registerModel" OnValidSubmit="@TryToRegister">
    <DataAnnotationsValidator/>

    <div class="d-flex flex-column align-items-center my-5">
        <div class="row justify-content-center gy-5">
            <div class="col-auto login-form">
                <h2>Create account</h2>
                <InputText class="form-input login-input" id="first-name" @bind-Value="_registerModel.FirstName" placeholder="First name"/>
                <div class="align-self-center mx-auto">
                    <ValidationMessage For="@(() => _registerModel.FirstName)"/>
                </div>
                <InputText class="form-input login-input" id="last-name" @bind-Value="_registerModel.LastName" placeholder="Last name"/>
                <div class="align-self-center mx-auto">
                    <ValidationMessage For="@(() => _registerModel.LastName)"/>
                </div>
                <InputText class="form-input login-input" id="email" @bind-Value="_registerModel.Email" placeholder="Email"/>
                <div class="align-self-center mx-auto">
                    <ValidationMessage For="@(() => _registerModel.Email)"/>
                </div>
                <InputText class="form-input login-input" id="password" @bind-Value="_registerModel.Password" type="password" placeholder="Password"/>
                <div class="align-self-center mx-auto">
                    <ValidationMessage For="@(() => _registerModel.Password)"/>
                </div>
                <InputText class="form-input login-input" id="confirm-password" @bind-Value="_registerModel.ConfirmPassword" type="password" placeholder="Confirm password"/>
                <div class="align-self-center mx-auto">
                    <ValidationMessage For="@(() => _registerModel.ConfirmPassword)"/>
                </div>

                @if (string.IsNullOrWhiteSpace(_errorMessage) == false)
                {
                    <div class="validation-message">@_errorMessage</div>
                }
                <button class="form-confirm-btn login-btn" type="submit">CreateAccount</button>
                <div>
                    <small>Have an account? <a class="nav-link login-nav-link" href="@LoginUrl">Login</a></small>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {

    private readonly RegisterModel _registerModel = new();
        private const string LoginUrl = "/login";
    private string _errorMessage = "";

    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var user = (await AuthState).User;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/");
        }
    }
    
    private async Task TryToRegister()
    {
        _errorMessage = "";
        
        var user = await UserManager.FindByEmailAsync(_registerModel.Email);
        if (user is not null)
        {
            _errorMessage = "Email is already taken";
            return;
        }
        await RegisterUser();
    }

    private async Task RegisterUser()
    {
        var emailStore = (IUserEmailStore<ApplicationUser>)UserStore;

        var user = new ApplicationUser
        {
            FirstName = _registerModel.FirstName!,
            LastName = _registerModel.LastName!,
            RegistrationTime = DateTime.UtcNow
        };
        await UserStore.SetUserNameAsync(user, _registerModel.Email, CancellationToken.None);
        await emailStore.SetEmailAsync(user, _registerModel.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, _registerModel.Password);

        if (result.Succeeded)
        {
    // TODO: add confirm registration url
            // var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            // code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

    // HACK: no mailing system as of now, all accounts will be auto confirmed
            await emailStore.SetEmailConfirmedAsync(user, true, CancellationToken.None);

            AuthorizationMiddleware.RequestLogin(new LoginModel { Email = _registerModel.Email, Password = _registerModel.Password, RememberMe = true }, NavManager);
        }
    }

}